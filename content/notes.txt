###################################################################################################

###################################################################################################
    - Popup window cannot use addGlobalEvent on Vertical Slipper (the position/size of the 
      popup is different, so only the popup window should be listened)
      
    - nodeControl in HTMLTree should not fire the node highlight (include rule in delegation func)
    
    - "close tag" node (</div>) should not be selectable, instead, when clicked it should select
      the "open tag" node (<div>).
    
    - The CSS rule of popup hide the "main controls" element, but the search box is inside of it
      and is getting hidden 


###################################################################################################

###################################################################################################

Bookmarlet
javascript:(function(){var%20s=document.createElement(%22script%22);s.src=%22http://firebug.local:8740/firebug1.3/build/firebug.min.js%22;document.getElementsByTagName("head")[0].appendChild(s);})();
javascript:(function(){var%20s=document.createElement(%22script%22);s.src=%22http://firebug.local:8740/firebug1.3/build/firebug.full.js%22;document.getElementsByTagName("head")[0].appendChild(s);})();

###################################################################################################
Preferences Brainstorm
###################################################################################################

    ------------------
    chrome
    ------------------
    - debug         open on startup
    - hide          minimize to screen corner (hiddenable)

    - popup         type (frame or popup)
    
    - height
    - width (popup only)
    - top (popup only)
    - left (popup only)
    - skin
    
    - override console

    ------------------
    modes
    ------------------
    - trace
    - local
    - persist



























###################################################################################################
Missing
###################################################################################################

---------------------------------------------------------------------------------------------------
 Popup
---------------------------------------------------------------------------------------------------
OK  - problem with global events when in popup window
      add/removeGlobalEvent looks for iframes only, excluding popup windows.
      
    - Frame/Popup settings
    
~~  - Detach method
    - Synchronize chromes
    
    - popup chrome in Opera isn't being initialized when NOT in bookmarlet mode. 
      Maybe the best way to detect when the chrome is loaded is the Joe Hewitt old way putting 
      JS in the end of HTML body. This is not a major issue since bookmarlet mode will be
      allways active when in production.

---------------------------------------------------------------------------------------------------
 Loading
---------------------------------------------------------------------------------------------------
    - Console.create() is being called in the wrong time
    
    - window onerror - wrong time 
    
    - Check the initializing order. 
    
    - Check create() and initialize() methods of Modules and Panels.
        - HTML panel create() will be called twice (1 for frame and 1 for popup)
    
    
---------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------
    
~~  - toolButtons
    ~~  - default button
    ~~  - toggle button (inspect, edit html)
    
~~  - mouseover Inspect
~~  - inspect
  
~~  - Panel controllers?
        - controller context should be the module Firebug.ModuleName 
        
    - Panel event delegation?


---------------------------------------------------------------------------------------------------
 Preferences?
---------------------------------------------------------------------------------------------------
    - FBL.application
    - FBL.preferences
    
---------------------------------------------------------------------------------------------------
 Chrome context synchronize
---------------------------------------------------------------------------------------------------
    - frame.isVisible --> isOpen?
    - Firebug.chromes.frame & Firebug.chromes.popup
    

    
---------------------------------------------------------------------------------------------------
Tool Buttons
---------------------------------------------------------------------------------------------------
~~  - inherits from Controller
~~  - it has one of 2 types (normal and toggle buttons)
~~  - it has, on a giving time, one of 2 states (pressed, and unpressed)
    
    - button location: Fixed buttons (inspect) and Panel buttons 
 
---------------------------------------------------------------------------------------------------
 UI
---------------------------------------------------------------------------------------------------
 OK - IE problem with Console and Trace panels. Scroll isnt working!!
      maybe a dummy div solves the problem? because the HTML has one, and scrolls fine
    
 OK - IE problem with tree node control positioning [+]
     OK - fix is to use absolute position in the control and the left and right panels
          need to check the z-indexes of the overall interface.

 
###################################################################################################
User Interface
###################################################################################################

---------------------------------------------------------------------------------------------------
General
---------------------------------------------------------------------------------------------------
    - Where exactly the errors indicator should be placed in the UI?

---------------------------------------------------------------------------------------------------
MiniChrome
---------------------------------------------------------------------------------------------------
    - 

---------------------------------------------------------------------------------------------------
Skins
---------------------------------------------------------------------------------------------------
     OK - port changes in XP skin to the "classic" and "light" ones
     
    1.4 - divide .css files? so new skins can be easier to write, and changes in UI can be easily 
          ported across skins 
        
    1.4 - each skin has in his own folder a file called "firebug.json" (or similar)
    1.4 - improve the build skin methods in FBDev
    1.4 - loadJSON method
    1.4 - loadSkin method


###################################################################################################
TODO's
###################################################################################################

---------------------------------------------------------------------------------------------------
Status Bar
---------------------------------------------------------------------------------------------------
 
---------------------------------------------------------------------------------------------------
ScrollArea Class
---------------------------------------------------------------------------------------------------
    - isScrolled
    - isVerticalScrolled
    - isHorizontalScrolled
    - isScrolledToBottom
    - scrollToElement(el)
    - isElementVisible(el)
    - interceptMouseWheel

---------------------------------------------------------------------------------------------------
Preferences
---------------------------------------------------------------------------------------------------
    - frame
        - id
        - height
         
    - popup
        - id
        - top
        - left
        - width
        - height
    

    - console
        - consoleDefaultNamespace
        - consoleAlternateNamespace
        - override console object (for non-FF browsers)

    - application
        - define public namespace

---------------------------------------------------------------------------------------------------
User Interface
---------------------------------------------------------------------------------------------------
    - Highlighted nodes in HTML tree with round corners (with OS color)
        - current implementation isn't good (it uses both CSS hack and JS)
        - Opera round corner SVG trick
        - best way to go is dynamically create a CSS rule according each browser 
    
    - UI styling
        - (?) detect Windows theme (XP or classic?)
        - (?) detect OS (windows or mac?)
    
    - error UI indications (like FB in status bar)
    - UI indication when chrome is hidden

---------------------------------------------------------------------------------------------------
Chrome
---------------------------------------------------------------------------------------------------
    - Opera problem with onunload and popups (context is not being destroyed)
 OK - frame, frameStyle, consoleFrame, consoleBody
 
    
---------------------------------------------------------------------------------------------------
Controllers
---------------------------------------------------------------------------------------------------
    - (?) add option to skip frames
 OK - add controllers Class

---------------------------------------------------------------------------------------------------
Core
---------------------------------------------------------------------------------------------------
    - (?) How to proceed when the console global variable is already defined?
    - (?) how to auto-load FirebugLite + Extension in a single bookmarlet?
    
    - custom Errors = throw new FirebugError("message")
    - better location detection to allow advanced settings via URL 
 ~~ - create/destroy, initialize/shutdown. rename functions to this pattern.
 OK - context
 OK - library loading in different windows
 ~~ - persitent popups
 
---------------------------------------------------------------------------------------------------
Core
---------------------------------------------------------------------------------------------------
    - Problem with id conflits. The same attribute is being used in the document
      elements and in the HTML Tree, in the user interface.

 OK - Better handling of switching tab contexts (selectedTab, rightPanelVisible)
    - Check if there's a problem using the Sizzle selector engine in the code

---------------------------------------------------------------------------------------------------
Lib
---------------------------------------------------------------------------------------------------
OK FBL.$
OK FBL.$$

---------------------------------------------------------------------------------------------------
Console
---------------------------------------------------------------------------------------------------
  $0
  $1

---------------------------------------------------------------------------------------------------
Events
---------------------------------------------------------------------------------------------------
 OK - use of dispatch
 OK - handle disble text selection on Vertical Scrolling
    - handle disble mouse wheel in Chrome, when in frame mode?


---------------------------------------------------------------------------------------------------
CommandLine
---------------------------------------------------------------------------------------------------
    - refactor commandLine to hide internal methods and properties.


    
###################################################################################################
BUGS
###################################################################################################
OK  - tabLStyle reference in Chrome

    - context.evaluate
    - context is not being properly handled in persistent mode, when using
      the autocomplete function in commandLine. It is using the wrong "window".
    
    - define FBL.console to point to the global console
    - console should be installed in each Chrome window
    
    - commandLine API should be place in console.firebuglite.commandLineAPI
    - commandLine API not well defined, when in persistent mode

OK  - commandLine API. Firebug.browser isn't avaiable when the library is initialized
    
OK  - Chrome options inheritance (extend) is not working as expected
OK  - Popup in IE, problem in the draw method

OK  - when NOT in injected mode, the new application load system doesn't work.
OK  - when in injected DEVELOPMENT mode, in XHTML documents, Google Chrome
      is having problems with the loading order of the multiple scripts.



###################################################################################################
###################################################################################################
###################################################################################################
BRAINSTORMING SECTION
###################################################################################################
###################################################################################################
###################################################################################################


###################################################################################################
Library Expose
###################################################################################################
    - if a FBLite extension can be dynamically loaded, the FBL namespace should be exposed 
    - if the FBL is exposed inside the iframe, it is less visible, and less conflictable 



###################################################################################################
FB vs FBLite
###################################################################################################

FB
    - Each Panel has its own window
    - A single Firebug application run across all browser tabs
    - The Firebug application is persistent, that is, it can live after page change, or reload 

FBLite
    - All Chrome Panels runs in the same window, the chrome window
    - The FirebugLite application run in a single browser tab
    - The Firebug application isn't persistent 


###################################################################################################
Chrome Design
###################################################################################################

---------------------------------------------------------------------------------------------------
Chrome
---------------------------------------------------------------------------------------------------
    - {?) panelControl
    - panelBar
    - panel // active panel
    
    - sidePanel // active side panel
    - commandLine


    - selectPanel()
    - selectSidePanel()


---------------------------------------------------------------------------------------------------
Panel
---------------------------------------------------------------------------------------------------
    - {?) panelControl
    - panelBar
    
    - sidePanel // active side panel
    - commandLine
    
    
    - isVisible // may be offline, in a documentFragment
    - show
    - hide

---------------------------------------------------------------------------------------------------
PanelControl
---------------------------------------------------------------------------------------------------
    - registerPanel
    - removePanel
    - removePanels
    - selectPanel

---------------------------------------------------------------------------------------------------
PanelBar
---------------------------------------------------------------------------------------------------
    - selectPanel()
    

###################################################################################################
Persistent Mode
###################################################################################################

---------------------------------------------------------------------------------------------------
Loading Process
---------------------------------------------------------------------------------------------------

1st Stage - Load the application in "offscreen mode", with only the console 
            functions available.

2nd Stage - Wait the page load, and then create the chrome window
            (frame or popup, based on preferences).

3rd Stage - Wait the chrome page load, and the install the application
            in the chrome window context.

4th Stage - Load the full application in chrome window, synchronizes it with
            the first application loaded, and transfer the console
            functions to the new "screen mode" application.

----------------------------------
Pros
---------------------------------------------------------------------------------------------------
    More safe
        - no global namespace pollution, except for the "console" variable
        - no internal code exposure
    
    Allows persistent popups

---------------------------------------------------------------------------------------------------
Cons
---------------------------------------------------------------------------------------------------
    More complex
    More difficult to debug low level functions
    less stable?



###################################################################################################
To organize
###################################################################################################

---------------------------------------------------------------------------------------------------
Document Cache
---------------------------------------------------------------------------------------------------

[ELEMENT_ID]
    - element
    - context
    - styles
    - MD5

---------------------------------------------------------------------------------------------------
DOMPLATE
---------------------------------------------------------------------------------------------------
IE problems with templates

1 - class name attributes of objects

2 - colon after the last property of a object

3 - event handlers  


========================================================================
===== Chrome States ====================================================
========================================================================

===== Window ===========================================================
    - type (frame, popup)
    - height
    - width (popup)
    - position (popup)

===== Console ==========================================================
    - console commandLine history

===== Tab ==============================================================
  - active Panel



========================================================================
===== Panel States =====================================================
========================================================================
    - offset (scroll position)
    - toolbarButtons
    - statusBar
    
    - isSearchable
    - busca
    
    - consoleVisible
    - sidePanelVisible

===== SidePanel =======================================================
    - offset (scroll position)
    - sidePanelWidth
    - activeSidePanel



###################################################################################################
Disable Text Selection
###################################################################################################

<script language="JavaScript1.2">

function disabletext(e){
return false
}

function reEnable(){
return true
}

//if the browser is IE4+
document.onselectstart=new Function ("return false")

//if the browser is NS6
if (window.sidebar){
document.onmousedown=disabletext
document.onclick=reEnable
}
</script>



###################################################################################################
XPATH
###################################################################################################

function getXPath(node, path) {
  path = path || [];
  if(node.parentNode) {
    path = getXPath(node.parentNode, path);
  }

  if(node.previousSibling) {
    var count = 1;
    var sibling = node.previousSibling
    do {
      if(sibling.nodeType == 1 && sibling.nodeName == node.nodeName) {count++;}
      sibling = sibling.previousSibling;
    } while(sibling);
    if(count == 1) {count = null;}
  } else if(node.nextSibling) {
    var sibling = node.nextSibling;
    do {
      if(sibling.nodeType == 1 && sibling.nodeName == node.nodeName) {
        var count = 1;
        sibling = null;
      } else {
        var count = null;
        sibling = sibling.previousSibling;
      }
    } while(sibling);
  }

  if(node.nodeType == 1) {
    path.push(node.nodeName.toLowerCase() + (node.id ? "[@id='"+node.id+"']" : count > 0 ? "["+count+"]" : ''));
  }
  return path;
};


// Getting result
document.evaluate("/html/body/div/ul/li[2]", document, null, XPathResult.ANY_TYPE, null ).iterateNext()



###################################################################################################
DomPlate changes pieces
###################################################################################################

//Returns true if it is a DOM node
function isNode(o){
  return (
    typeof Node === "object" ? o instanceof Node : 
    typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName==="string"
  );
}

//Returns true if it is a DOM element    
function isElement(o){
  return (
    typeof HTMLElement === "object" ? o instanceof HTMLElement : //DOM2
    typeof o === "object" && o.nodeType === 1 && typeof o.nodeName==="string"
);
}



###################################################################################################
Advanced CSS Features brainstorm
###################################################################################################


styleCache = {};

// First style to add to cache is the inline styles
for(cid in documentCache)
{
    styleCache[cid] = [];
    styleCache[cid].push();
}

// for each stylesheet 
for(stylesheet in stylesheets)
{
    // look at each rule
    for(rule in stylesheet)
    {
        // get the rule's selector, and find all elements in document
        var els = Firebug.Selector(rule.selector);
        
        // for each element found
        for(var i=0, el; el=els[i]; i++)
        {
            var cid = el[cacheID];
            
            // Add style info in the cache stack of styles of the element 
            styleCache[cid].push({
                stylesheet: stylesheet,
                lineNumber: getLineNumber(rule, stylesheet),
                fileName: getFileName(rule, stylesheet),
                selector: rule.selector,
                styles: rule.styles
            });
        }
    }

}


###################################################################################################
Advanced CSS Features Implementation
###################################################################################################

function getInlineStyles(el)
{
    var style = el.style;
    var r = {}, l, prop;
    
    // Good browsers first
    if (l = style.length)
    {
        for(var i=0; i<l; i++)
        {
            prop = style[i];
            r[toCamelCase(prop)] = style.getPropertyValue(prop);
        }
    }
    // Sad browsers last
    else
    {
      for(var prop in style)
        if (ignoreIEStyleProperties.indexOf(prop) == -1 && 
            isIEInlineStyleProperty(el, prop))
                r[prop] = style[prop];
    }
    
    return r;
}

var ignoreIEStyleProperties = " cssText accelerator ";
function isIEInlineStyleProperty(el, prop)
{
    var r = false;
    
    if (typeof el.style[prop] == "string")
    {
        r = !!el.style[prop];
    }
    
    return r;
}


function toCamelCase(s)
{
    return s.replace(_selectorCaseMatch, _toCamelCaseReplaceFn);
}

function toSelectorCase(s)
{
  return s.replace(_camelCaseMatch, "-$1").toLowerCase();
  
}

var _camelCaseMatch = /([A-Z])/g;
var _selectorCaseMatch = /\-(.)/g; 
function _toCamelCaseReplaceFn(m,g)
{
    return g.toUpperCase();
}
